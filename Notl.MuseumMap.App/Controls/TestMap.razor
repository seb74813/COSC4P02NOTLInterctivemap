<style>
    .panzoom-parent {
        border: 10px solid rgba(1, 1, 1, 1);
        box-shadow: 0px 0px 5px 1px rgba(0, 0, 0, 0.1);
        margin: 0 auto;
    }

    .panzoom {
        border: 1px solid #ddd;
        box-shadow: 0px 0px 5px 1px rgba(0, 0, 0, 0.1);
    }

    .button-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }

    .coordinate-button {
        position: absolute;
    }

</style>

<div class="buttons">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ZoomIn" OnClick="OnZoomInClick"></MudFab>
    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ZoomOut" OnClick="OnZoomOutClick"></MudFab>
    <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.LocationSearching" OnClick="OnResetClick"></MudFab>
</div>
<div class="panzoom-parent">
    <Panzoom? @ref="panzoom">
        <div @ref="@context.ElementReference" class="panzoom">
            <img src="newmap.png" alt="image" />
            <div class="button-container">
                @foreach (var item in pois)
                {
                    <MudFab class="coordinate-button" StartIcon="@Icons.Material.Filled.LocationOn" Color="Color.Error" Style=@styleString(item) OnClick="OnResetClick"></MudFab>
                }
            </div>
        </div>
    </Panzoom>
</div>


@code {

    private List<POIModel> pois;
    private Panzoom panzoom;

    protected override void OnInitialized(){

        pois = new List<POIModel> 
        {
           // POIModel{X=1500,Y=916},
           new POIModel{X=850,Y=500},
           new POIModel{X=650,Y=500},
           new POIModel{X=450,Y=450},
           new POIModel{X=1200,Y=450},
           new POIModel{X=1200,Y=250},
        };
        StateHasChanged();
    }

    private string styleString(POIModel poi)
    {
        return $"top: {poi.Y}px; left: {poi.X}px;";
    }

    private async Task OnZoomInClick(MouseEventArgs args)
    {
        await AdjustScale(true);
    }

    private async Task OnZoomOutClick(MouseEventArgs args)
    {
        await AdjustScale(false);
    }

    private async Task OnResetClick(MouseEventArgs args)
    {
        await panzoom.ResetAsync();
    }

    private async Task AdjustScale(bool zoomIn)
    {
        var oldScale = await panzoom.GetScaleAsync();

        if (zoomIn)
        {
            await panzoom.ZoomInAsync();
        }
        else
        {
            await panzoom.ZoomOutAsync();
        }
        var newScale = await panzoom.GetScaleAsync();
    }

}