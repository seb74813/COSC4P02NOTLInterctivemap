@if (Data != null)
{
    <Panzoom @ref="panzoom" SetTransform="SetTransformCustom">
        <div @ref="@panzoom.ElementReference" class="fixed">
            @if (Data.PoiType == POIType.Exhibit)
            {
                <MudButton OnClick="Click">
                    <MudText Align="Align.Center" Typo="Typo.body1" Class="coordinate-exhibit button pa-3" style="color: black;">
                        @if (Data.Title != null)
                        {
                            @Data.Title
                        }
                        else
                        {
                            @Data.PoiType
                        }
                    </MudText>
                </MudButton>
            }
            else
            {
                <MudButton OnClick="Click">
                    <MudStack Justify="Justify.Center" Spacing="0" Class="button pa-3">
                        <MudStack Row=true>
                            <MudSpacer />
                            <MudIcon class="coordinate-icon"
                             Color=@getColor()
                             Icon=@getIcon()
                             Variant="Variant.Filled"
                             Size="Size.Small">
                            </MudIcon>
                            <MudSpacer />
                        </MudStack>
                        <MudText Align="Align.Center" Typo="Typo.body1" Class="coordinate-title">
                            @if (Data.Title != null)
                            {
                                @Data.Title
                            }
                            else
                            {
                                @Data.PoiType
                            }
                        </MudText>
                    </MudStack>
                </MudButton>
            }
        </div>
    </Panzoom>
}

@code {
    private bool initialize = false;
    private Panzoom? panzoom;

    [Parameter]
    public POIModel? Data { get; set; }

    [Parameter]
    public Panzoom? Parent { get; set; }

    [Parameter]
    public EventCallback<POIModel> OnClick { get; set; }

    private async Task SetTransformCustom(SetTransformEventArgs eventArgs)
    {
        if (Parent != null && panzoom != null && Data != null)
        {
            if (!initialize)
            {

                var parentScale = await Parent.GetScaleAsync();
                await panzoom.SetStyleAsync(
                    "transform",
                    $"scale({eventArgs.Scale}) translate({Data.X / parentScale}px, {Data.Y / parentScale}px)");

                PanzoomOptions options = new PanzoomOptions
                {
                    Cursor = Cursor.Auto,
                    DisableXAxis = true,
                    DisableYAxis = true,
                };
                await panzoom.SetOptionsAsync(options);
                initialize = true;
            }
        }
    }

    private string getIcon()
    {
        if (Data != null)
        {
            switch (Data.PoiType)
            {
                case POIType.Exhibit:
                    return Icons.Material.Filled.Map;
                case POIType.Item:
                    return Icons.Material.Filled.LocationOn;
                case POIType.Bathroom:
                    return Icons.Material.Filled.FamilyRestroom;
                case POIType.Accessability:
                    return Icons.Material.Filled.Accessible;
            }
        }
        return "";
    }

    private Color getColor()
    {
        if (Data != null)
        {
            switch (Data.PoiType)
            {
                case POIType.Exhibit:
                    return Color.Error;
                case POIType.Item:
                    return Color.Error;
                case POIType.Bathroom:
                    return Color.Primary;
                case POIType.Accessability:
                    return Color.Info;
            }
        }
        return Color.Error;
    }

    private async Task Click()
    {
        await OnClick.InvokeAsync(Data);
    }
}
