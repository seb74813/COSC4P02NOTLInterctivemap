@if (MapData != null && POIs != null)
{
    <div class="panzoom-parent">
        <Panzoom @ref="panzoom">
            <MudStack Class="absolute z-10 ma-2">
                <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ZoomIn" OnClick="OnZoomInClick" />
                <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ZoomOut" OnClick="OnZoomOutClick" />
                <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.LocationSearching" OnClick="OnResetClick" />
            </MudStack>
            <div @ref="@context.ElementReference" class="panzoom">
                <MudImage Src=@MapData.Image.Url/>
                <div class="button-container">
                    @foreach (var item in POIs)
                    {
                       <POI Data="item"></POI>
                    }
                </div>
            </div>
        </Panzoom>
    </div>
}

@code {

    [Parameter]
    public MapModel? MapData { get; set; }

    [Parameter]
    public List<POIModel>? POIs { get; set; }

    private Panzoom? panzoom;

    private string styleString(POIModel poi)
    {
        return $"top: {poi.Y}px; left: {poi.X}px;";
    }

    private async Task OnZoomInClick(MouseEventArgs args)
    {
        await AdjustScale(true);
    }

    private async Task OnZoomOutClick(MouseEventArgs args)
    {
        await AdjustScale(false);
    }

    private async Task OnResetClick(MouseEventArgs args)
    {
        if(panzoom == null)
        {
            throw new Exception("panzoom is null");
        }

        await panzoom.ResetAsync();
    }

    private async Task AdjustScale(bool zoomIn)
    {
        if (panzoom == null)
        {
            throw new Exception("panzoom is null");
        }
        var oldScale = await panzoom.GetScaleAsync();

        if (zoomIn)
        {
            await panzoom.ZoomInAsync();
        }
        else
        {
            await panzoom.ZoomOutAsync();
        }
        var newScale = await panzoom.GetScaleAsync();
    }

}