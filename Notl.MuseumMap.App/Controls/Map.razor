<style>
    .panzoom-parent {
        border: 10px solid rgba(1, 1, 1, 1);;
        box-shadow: 0px 0px 5px 1px rgba(0, 0, 0, 0.1);
        max-width: 500px;
        margin: 0 auto;
    }

    .panzoom {
        border: 1px solid #ddd;
        box-shadow: 0px 0px 5px 1px rgba(0, 0, 0, 0.1);
    }
</style>

@if (MapData != null && POIs != null)
{
    <div class="buttons">
        <MudButton @onclick="OnZoomInClick">Zoom in</MudButton>
        <MudButton @onclick="OnZoomOutClick">Zoom out</MudButton>
        <MudButton @onclick="OnResetClick">Reset</MudButton>
    </div>
    <div class="panzoom-parent">
        <Panzoom @ref="panzoom">
            <div @ref="@context.ElementReference" class="panzoom">
                <MudImage Src="" />
            </div>
        </Panzoom>
    </div>
}

@code {

    [Parameter]
    public MapModel? MapData { get; set; }

    [Parameter]
    public List<POIModel>? POIs { get; set; }

    private Panzoom? panzoom;

    private async Task OnZoomInClick(MouseEventArgs args)
    {
        await AdjustScale(true);
    }

    private async Task OnZoomOutClick(MouseEventArgs args)
    {
        await AdjustScale(false);
    }

    private async Task OnResetClick(MouseEventArgs args)
    {
        if(panzoom == null)
        {
            throw new Exception("panzoom is null");
        }

        await panzoom.ResetAsync();
    }

    private async Task AdjustScale(bool zoomIn)
    {
        if (panzoom == null)
        {
            throw new Exception("panzoom is null");
        }
        var oldScale = await panzoom.GetScaleAsync();

        if (zoomIn)
        {
            await panzoom.ZoomInAsync();
        }
        else
        {
            await panzoom.ZoomOutAsync();
        }
        var newScale = await panzoom.GetScaleAsync();
    }

}