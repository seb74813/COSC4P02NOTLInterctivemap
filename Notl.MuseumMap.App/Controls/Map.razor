@inherits BasePage

@if (MapData != null && POIs != null)
{
    <div class="panzoom-parent">
        <MudOverlay @bind-Visible="isVisible" OnClick="clear" DarkBackground="true" AutoClose="true" ZIndex="11">
            @if (selectedPOI != null)
            {
                <MudHidden Breakpoint="Breakpoint.LgAndUp">
                    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
                        <POIContent Poi="selectedPOI"/>
                    </MudContainer>
                </MudHidden> 
                
                <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert=true>
                    <MudContainer MaxWidth="MaxWidth.Medium">
                        <POIContent Poi="selectedPOI"/>
                    </MudContainer>
                </MudHidden> 

                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="clear"/>
                <MudPaper> 
                    <MudImage Fluid="true" Src="@selectedPOI.Image.Url" Class="rounded-lg"/>
                    <MudMarkdown Value="@selectedPOI.Description"/>
                </MudPaper>
            }
        </MudOverlay>

        <Panzoom @ref="panzoom">
            <MudStack Class="absolute z-10 ma-2">
                <MudTooltip Text="@Localizer["ToolTip_ZoomIn"]" Placement="Placement.Right">
                    <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ZoomIn" OnClick="OnZoomInClick" />
                </MudTooltip>
                <MudTooltip Text="@Localizer["ToolTip_ZoomOut"]" Placement="Placement.Right">
                    <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ZoomOut" OnClick="OnZoomOutClick" />
                </MudTooltip>
                <MudTooltip Text="@Localizer["ToolTip_Reset"]" Placement="Placement.Right">
                    <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.LocationSearching" OnClick="OnResetClick" />
                </MudTooltip>
            </MudStack>
            <div @ref="@context.ElementReference" class="panzoom">
                <MudImage Src=@MapData.Image.Url/>
                <div class="button-container">
                    @foreach (var item in POIs)
                    {
                       <POI Data="item" Parent=panzoom OnClick="select"></POI>
                    }
                </div>
            </div>
        </Panzoom>
    </div>
}

@code {
    private bool isVisible = false;
    private POIModel? selectedPOI;
    double minZoom = 0.8;
    double maxZoom = 2.0;

    [Parameter]
    public MapModel? MapData { get; set; }

    [Parameter]
    public List<POIModel>? POIs { get; set; }

    private Panzoom? panzoom;

    private async Task OnZoomInClick(MouseEventArgs args)
    {
        await AdjustScale(true);
    }

    private async Task OnZoomOutClick(MouseEventArgs args)
    {
        await AdjustScale(false);
    }

    private async Task OnResetClick(MouseEventArgs args)
    {
        if(panzoom == null)
        {
            throw new Exception("panzoom is null");
        }

        await panzoom.ResetAsync();
    }

    private async Task AdjustScale(bool zoomIn)
    {
        if (panzoom == null)
        {
            throw new Exception("panzoom is null");
        }
        var oldScale = await panzoom.GetScaleAsync();
        double scaleFactor = zoomIn ? 1.2 : 0.8;
        double newScale = oldScale * scaleFactor;
        if (newScale >= minZoom && newScale <= maxZoom)
        {
            if (zoomIn)
            {
                await panzoom.ZoomInAsync();
            }
            else
            {
                await panzoom.ZoomOutAsync();
            }
        }
        var CurrentScale = await panzoom.GetScaleAsync();
    }

    private void select(POIModel data)
    {
        selectedPOI = data;
        isVisible = true;
        StateHasChanged();
    }

    private void clear()
    {
        selectedPOI = null;
        isVisible = false;
        StateHasChanged();
    }
}