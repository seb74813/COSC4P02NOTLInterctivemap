@if (Data != null)
{
    <Panzoom @ref="panzoom" SetTransform="SetTransformCustom">
       
        <div @ref="@panzoom.ElementReference" class="d-inline-block">

            <ContextMenuTrigger MenuId="POIMenu">

            @if (Data.PoiType == POIType.Exhibit)
            {
                <MudButton class="coordinate-exhibit" style="color: black;">
                    @if (Data.Title != null)
                    {
                        @Data.Title
                    }
                    else
                    {
                        @Data.PoiType
                    }
                </MudButton>
            }
            else
            {
                <MudIconButton class="coordinate-icon"
                        Color="Color.Error"
                        Icon=@getIcon()
                        Size="Size.Small">
                </MudIconButton>
                <MudText class="coordinate-title">
                    @if (Data.Title != null)
                    {
                        @Data.Title
                    }
                    else
                    {
                        @Data.PoiType
                    }
                </MudText>

            }
            </ContextMenuTrigger>
        </div>
           
    </Panzoom>

    <ContextMenu Id="POIMenu">
        <Item OnClick="Edit">Edit Content</Item>
        <Item OnClick="Delete">Delete</Item>
    </ContextMenu>
}
else
{
    <div>Welp</div>
}

@code {
    private Panzoom? panzoom;

    private bool initialize = false;

    [Parameter]
    public POIModel? Data { get; set; }

    [Parameter]
    public EventCallback<POIModel> OnEdit { get; set; }

    [Parameter]
    public EventCallback<POIModel> OnDelete { get; set; }

    [Parameter]
    public Panzoom? Parent { get; set; }

    [Parameter]
    public EventCallback<POIModel> OnChange { get; set; }

    private async Task SetTransformCustom(SetTransformEventArgs eventArgs)
    {
        if (Parent != null && panzoom != null && Data != null)
        {
            if (!initialize)
            {

                var parentScale = await Parent.GetScaleAsync();
                await panzoom.SetStyleAsync(
                    "transform",
                    $"scale({eventArgs.Scale}) translate({Data.X / parentScale}px, {Data.Y / parentScale}px)");
                initialize = true;
            }
            else
            {

                var parentScale = await Parent.GetScaleAsync();
                await panzoom.SetStyleAsync(
                    "transform",
                    $"scale({eventArgs.Scale}) translate({eventArgs.X / parentScale}px, {eventArgs.Y / parentScale}px)");
                Data.X = (int)(eventArgs.X / parentScale);
                Data.Y = (int)(eventArgs.Y / parentScale);
                await OnChange.InvokeAsync(Data);

            }
        }
    }

    private string getName()
    {
        if (Data != null)
        {
            return Data.Id.ToString();
        }
        return "";
    }

    private string getIcon()
    {
        if (Data != null)
        {
            switch (Data.PoiType)
            {
                case POIType.Exhibit:
                    return Icons.Material.Filled.Map;
                case POIType.Item:
                    return Icons.Material.Filled.LocationOn;
                case POIType.Bathroom:
                    return Icons.Material.Filled.FamilyRestroom;
                case POIType.Accessability:
                    return Icons.Material.Filled.Accessible;
            }
        }
        return "";
    }

    private async Task Edit()
    {
        await OnEdit.InvokeAsync(Data);
    }
    
    private async Task Delete()
    {
        await OnDelete.InvokeAsync(Data);
    }

}
