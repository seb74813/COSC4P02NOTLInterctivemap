@inherits BasePage

@if (Data != null && Parent != null)
{
    <Panzoom @ref="panzoom" SetTransform="SetTransformCustom">
        <div @ref="@panzoom.ElementReference" class="d-inline-block" style="@styleString()">
            <ContextMenuTrigger MenuId=@getMenuId()>
            @if (Data.PoiType == POIType.Exhibit)
            {
                <MudText Align="Align.Center" Typo="Typo.body1" Class="coordinate-exhibit movable pa-3" style="color: black;">
                    @if (Data.Title != null)
                    {
                        @Data.Title
                    }
                    else
                    {
                        @Data.PoiType
                    }
                </MudText>
            }
            else
            {
                <MudStack Justify="Justify.Center" Spacing="0" Class="movable pa-3">
                    <MudStack Row=true>
                        <MudSpacer/>
                            <MudIcon class="coordinate-icon"
                             Color=@getColor()
                             Icon=@getIcon()
                             Variant="Variant.Filled"
                             Size="Size.Small">
                            </MudIcon>
                        <MudSpacer />
                    </MudStack>
                    <MudText Align="Align.Center" Typo="Typo.body1" Class="coordinate-title">
                        @if (Data.Title != null)
                        {
                            @Data.Title
                        }
                        else
                        {
                            @Data.PoiType
                        }
                    </MudText>
                </MudStack>
            }
            </ContextMenuTrigger>
        </div>
    </Panzoom>

    <ContextMenu Id=@getMenuId()>
        <Item OnClick="Edit">@Localizer["Option_EditContent"]</Item>
        <Item OnClick="Delete">@Localizer["Option_Delete"]</Item>
    </ContextMenu>
}

@code {
    private Panzoom? panzoom;
    private bool initialize = false;

    [Parameter]
    public POIModel? Data { get; set; }

    [Parameter]
    public Panzoom? Parent { get; set; }

    [Parameter]
    public EventCallback<POIModel> OnEdit { get; set; }

    [Parameter]
    public EventCallback<POIModel> OnDelete { get; set; }

    [Parameter]
    public EventCallback<POIModel> OnMoved { get; set; }

    private async Task SetTransformCustom(SetTransformEventArgs eventArgs)
    {
        if (Parent != null && panzoom != null && Data != null)
        {
            if (!initialize)
            {

                var parentScale = await Parent.GetScaleAsync();
                await panzoom.SetStyleAsync(
                    "transform",
                    $"scale({eventArgs.Scale}) translate({Data.X / parentScale}px, {Data.Y / parentScale}px)");
                PanzoomOptions options = new PanzoomOptions
                    {
                        Cursor = Cursor.Auto,
                        StartX = Data.X / parentScale,
                        StartY = Data.Y / parentScale,
                    };
                await panzoom.SetOptionsAsync(options);
                initialize = true;
            }
            else
            {
                var parentScale = await Parent.GetScaleAsync();
                await panzoom.SetStyleAsync(
                    "transform",
                    $"scale({eventArgs.Scale}) translate({ eventArgs.X / parentScale}px, { eventArgs.Y / parentScale}px)");
                Data.X = (int)(eventArgs.X / parentScale);
                Data.Y = (int)(eventArgs.Y / parentScale);
                await OnMoved.InvokeAsync(Data);
            }
        }
    }

    private async Task<string> styleString()
    {    
        if (Data != null && Parent != null)
        {
            var scale = await Parent.GetScaleAsync();
            return $"transform: scale({scale}), translate({Data.X / scale}px, {Data.Y / scale}px)";
        }
        return "";
    }

    private async Task<double> getX()
    {
        if (Data != null && Parent != null)
        {
            var scale = await Parent.GetScaleAsync();
            return Data.X / scale;
        }
        return 0.0;
    }

    private async Task<double> getY()
    {
        if (Data != null && Parent != null)
        {
            var scale = await Parent.GetScaleAsync();
            return Data.Y / scale;
        }
        return 0.0;
    }

    private string getMenuId()
    {
        if(Data != null)
        {
            return $"MenuId-{Data.Id}";
        }
        return "";
    }

    private string getIcon()
    {
        if (Data != null)
        {
            switch (Data.PoiType)
            {
                case POIType.Exhibit:
                    return Icons.Material.Filled.Map;
                case POIType.Item:
                    return Icons.Material.Filled.LocationOn;
                case POIType.Bathroom:
                    return Icons.Material.Filled.FamilyRestroom;
                case POIType.Accessability:
                    return Icons.Material.Filled.Accessible;
            }
        }
        return "";
    }

    private Color getColor()
    {
        if (Data != null)
        {
            switch (Data.PoiType)
            {
                case POIType.Exhibit:
                    return Color.Error;
                case POIType.Item:
                    return Color.Error;
                case POIType.Bathroom:
                    return Color.Primary;
                case POIType.Accessability:
                    return Color.Info;
            }
        }
        return Color.Error;
    }

    private async Task Edit()
    {
        await OnEdit.InvokeAsync(Data);
    }
    
    private async Task Delete()
    {
        await OnDelete.InvokeAsync(Data);
    }
}
