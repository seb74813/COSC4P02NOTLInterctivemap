@page "/map/{Id:guid}"
@inherits BasePage
@attribute [Authorize]

<BusyIndicator Model="@this" />
<PageTitle>@Localizer["AppName"]</PageTitle>

@if (!IsBusy && MapData != null && POIs != null)
{
    <div class="panzoom-parent">
        <Panzoom @ref="parent">
            <MudStack Justify="Justify.FlexEnd" Row=" true">
                <MudTooltip Text="@Localizer["ToolTip_BackButton"]" Placement="Placement.Left">
                    <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ExitToApp" OnClick="ToMaps" />
                </MudTooltip>
            </MudStack>
            <MudStack Class="absolute z-10" Row=true Style="bottom: 1rem; width:100%">
                <MudSpacer />
                <MudPaper Elevation="25">
                    <MudToolBar>  
                        <MudStack Row=true>
                            <MudTooltip Text="@Localizer["ToolTip_ResetMap"]" Placement="Placement.Top">
                                <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.LocationSearching" OnClick="OnResetClick" />
                            </MudTooltip>
                            <MudTooltip Text="@Localizer["ToolTip_ZoomIn"]" Placement="Placement.Top">
                                <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ZoomIn" OnClick="OnZoomInClick" />
                            </MudTooltip>
                            <MudTooltip Text="@Localizer["ToolTip_ZoomOut"]" Placement="Placement.Top">
                                <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ZoomOut" OnClick="OnZoomOutClick" />
                            </MudTooltip>
                            <MudTooltip Text="@Localizer["ToolTip_EditMapInfo"]" Placement="Placement.Top">
                                <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.FileUpload" OnClick="NavigateUploadImage" />
                            </MudTooltip>
                            <MudTooltip Text="@Localizer["ToolTip_NewPOI"]" Placement="Placement.Top">
                                <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.AddLocation" OnClick="NewPOI" />
                            </MudTooltip>
                        </MudStack>
                    </MudToolBar>
                </MudPaper>
                <MudSpacer/>
            </MudStack>
            <div @ref="@context.ElementReference" class="panzoom">
                <MudImage Src=@MapData.Image.Url/>
                <div class="button-container">
                    @foreach (var item in POIs)
                    {                  
                        <POI Data="item" Parent="parent" OnMoved="Moved" OnDelete="DeletePOI" OnEdit="OnEdit" />
                    }
                </div>
            </div>
        </Panzoom>
    </div>
}

@code {
    private List<POIModel>? POIs;
    private Panzoom? parent;
    private MapModel? MapData;

    [Parameter]
    public Guid Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        IsInitialized = true;

        try
        {
            IsBusy = true;
            MapData = await ClientContext.Admin.GetMapAsync(Id);
            if (MapData.Image == null)
            {
                NavigateUploadImage();
            }
            POIs = await ClientContext.Admin.GetPOIsAuthAsync(Id);
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    private async Task DeletePOI(POIModel poi)
    {
        if(POIs == null)
        {
            throw new Exception("Poi list was not initialized");
        }
        var parameters = new DialogParameters();
        parameters.Add("ContentText", Localizer["Text_DeletePOI"].Value);
        parameters.Add("ButtonText", Localizer["Button_Delete"].Value);
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = Dialog.Show<DeleteDialog>(Localizer["Title_DeletePOI"], parameters, options);

        var result = await dialog.Result;

        try
        {
            IsBusy = true;
            if (!result.Canceled)
            {
                POIs.Remove(poi);
                await ClientContext.Admin.DeletePOIAsync(poi.Id);
            }
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    private async void Moved(POIModel poi)
    {
        if (POIs == null)
        {
            throw new Exception("Poi list was not initialized");
        }

        try
        {
            await ClientContext.Admin.UpdatePOIAsync(poi);
        }
        catch (Exception ex)
        {
            IsBusy = true;
            var old = await ClientContext.Admin.GetPOIAuthAsync(poi.Id);
            IsBusy = false;
            poi = POIs.Where(p => p.Id == poi.Id).First();
            if (poi != null &&  old != null)
            {
                poi.X = old.X;
                poi.Y = old.Y;
            }
            ShowError(ex);
        }
    }

    private async Task NewPOI()
    {
        if (POIs != null)
        {
            var poi = new POIModel();
            poi.Id = Guid.NewGuid();
            poi.MapId = Id;
            poi.PoiType = POIType.Item;

            try
            {
                IsBusy = true;
                poi = await ClientContext.Admin.CreatePOIAsync(poi);
                POIs.Add(poi);
                IsBusy = false;
            }
            catch (Exception ex)
            {
                ShowError(ex);
            }
        }
    }

    private void OnEdit(POIModel poi)
    {
        Navigation.NavigateTo($"poi/{poi.Id}");
    }

    private async Task OnZoomInClick(MouseEventArgs args)
    {
        await AdjustScale(true);
    }

    private async Task OnZoomOutClick(MouseEventArgs args)
    {
        await AdjustScale(false);
    }

    private async Task OnResetClick(MouseEventArgs args)
    {
        if (parent == null)
        {
            throw new Exception("panzoom is null");
        }

        await parent.ResetAsync();
    }

    private async Task AdjustScale(bool zoomIn)
    {
        if (parent == null)
        {
            throw new Exception("panzoom is null");
        }
        var oldScale = await parent.GetScaleAsync();

        if (zoomIn)
        {
            await parent.ZoomInAsync();
        }
        else
        {
            await parent.ZoomOutAsync();
        }
        var newScale = await parent.GetScaleAsync();
    }

    private void NavigateUploadImage()
    {
        Navigation.NavigateTo($"upload/{Id}");
    }

    private void ToMaps()
    {
        Navigation.NavigateTo($"");
    }

}
