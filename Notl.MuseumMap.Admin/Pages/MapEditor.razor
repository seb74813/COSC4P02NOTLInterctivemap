@page "/map/{Id:guid}"
@inherits BasePage
@attribute [Authorize]

<BusyIndicator Model="@this" />
<PageTitle>@Localizer["AppName"]</PageTitle>

@if (!IsBusy && MapData != null && POIs != null)
{
    <div class="panzoom-parent">
        <MudOverlay @bind-Visible="isVisible" OnClick="clear" DarkBackground="true" AutoClose="true" ZIndex="11">
            @if (selectedPOI != null)
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="clear"/>
                <MudPaper> 
                    <MudImage Fluid="true" Src="@selectedPOI.ImageURL" Class="rounded-lg"/>
                    <MudMarkdown Value="@selectedPOI.Description"/>
                </MudPaper>
            }
        </MudOverlay>

        <Panzoom @ref="parent">
            <MudStack Class="absolute z-10" Row=true>
                <MudFab StartIcon="@Icons.Material.Filled.ArrowBack" /> 
                <MudSpacer />
                <MudPaper Elevation="25">
                    <MudToolBar> 
                        <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.LocationSearching" OnClick="OnResetClick" />
                        <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ZoomIn" OnClick="OnZoomInClick" />
                        <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ZoomOut" OnClick="OnZoomOutClick" />
                        <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.FileUpload" OnClick="NavigateUploadImage" />
                        <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.AddLocation" />
                    </MudToolBar>

                </MudPaper>
                <MudSpacer/>

                
            </MudStack>
            <div @ref="@context.ElementReference" class="panzoom">
                <MudImage Src=@MapData.Image.Url/>
                <div class="button-container">
                    @foreach (var item in POIs)
                    {
                       <POI Data="item" OnClick="select" Parent="parent" />
                    }
                </div>
            </div>
        </Panzoom>
    </div>
}

@code {
    private bool isVisible = false;
    private POIModel? selectedPOI;
    private List<POIModel>? newPOIs;
    private Panzoom? parent;

    public MapModel? MapData { get; set; }

    public List<POIModel>? POIs { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        IsInitialized = true;

        try
        {
            IsBusy = true;
            newPOIs = new List<POIModel>();
            MapData = await ClientContext.Admin.GetMapAsync(Id);
            POIs = await ClientContext.Admin.GetPOIsAuthAsync(Id);
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    private void NavigateUploadImage(MapModel model)
    {
        Navigation.NavigateTo($"map/{model.Id}");
    }

    private async Task OnZoomInClick(MouseEventArgs args)
    {
        await AdjustScale(true);
    }

    private async Task OnZoomOutClick(MouseEventArgs args)
    {
        await AdjustScale(false);
    }

    private async Task OnResetClick(MouseEventArgs args)
    {
        if (parent == null)
        {
            throw new Exception("panzoom is null");
        }

        await parent.ResetAsync();
    }

    private async Task AdjustScale(bool zoomIn)
    {
        if (parent == null)
        {
            throw new Exception("panzoom is null");
        }
        var oldScale = await parent.GetScaleAsync();

        if (zoomIn)
        {
            await parent.ZoomInAsync();
        }
        else
        {
            await parent.ZoomOutAsync();
        }
        var newScale = await parent.GetScaleAsync();
    }

    private void select(POIModel data)
    {
        selectedPOI = data;
        isVisible = true;
        StateHasChanged();
    }

    private void clear()
    {
        selectedPOI = null;
        isVisible = false;
        StateHasChanged();
    }

    private async void addPOI(POIModel poiModel)
    {
        //var poi = await ClientContext.Admin.CreatePOIAsync(poiModel.Id, Id, poiModel.X);
    }

    private void NavigateUploadImage()
    {
        Navigation.NavigateTo($"map/{Id}");
    }
}
