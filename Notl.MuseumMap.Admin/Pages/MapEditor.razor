@page "/map/{Id:guid}"
@inherits BasePage
@attribute [Authorize]

<BusyIndicator Model="@this" />
<PageTitle>@Localizer["AppName"]</PageTitle>

@if (!IsBusy && MapData != null && POIs != null)
{
    <div class="panzoom-parent">

        <Panzoom @ref="parent">
            <MudStack Class="absolute z-10" Row=true Style="width:100%">
                <MudFab StartIcon="@Icons.Material.Filled.ArrowBack" /> 
                <MudSpacer />
                <MudPaper Elevation="25">
                    <MudToolBar>  
                        <MudStack Row=true>
                            <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.LocationSearching" OnClick="OnResetClick" />
                            <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ZoomIn" OnClick="OnZoomInClick" />
                            <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.ZoomOut" OnClick="OnZoomOutClick" />
                            <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.FileUpload" OnClick="NavigateUploadImage" />
                            <MudIconButton Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Filled.AddLocation" OnClick="NewPOI" />
                        </MudStack>
                        </MudToolBar>

                </MudPaper>
                <MudSpacer/>
                @if (isEdited)
                {
                    <MudButton Color="Color.Success" Variant="Variant.Filled" Size="Size.Large" OnClick="SaveChangesAsync" Style="margin-right: 16px;">Save Changes</MudButton>
                }

            </MudStack>
            <div @ref="@context.ElementReference" class="panzoom">
                <MudImage Src=@MapData.Image.Url/>
                <div class="button-container">
                    @foreach (var item in POIs)
                    {                  
                        <POI Data="item" Parent="parent" OnChange="SetEdited" OnDelete="DeletePOI" OnEdit="EditPOI" />
                    }

                </div>
            </div>
        </Panzoom>
    </div>
}

@code {
    private bool isVisible = false;
    private List<POIModel>? editPOIs;
    private Panzoom? parent;
    private bool isEdited = false;

    public MapModel? MapData { get; set; }

    public List<POIModel>? POIs { get; set; }

    [Parameter]
    public Guid Id { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        IsInitialized = true;

        try
        {
            IsBusy = true;
            editPOIs = new List<POIModel>();
            MapData = await ClientContext.Admin.GetMapAsync(Id);
            if (MapData.Image == null)
            {
                NavigateUploadImage(MapData);
            }
            POIs = await ClientContext.Admin.GetPOIsAuthAsync(Id);
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    private async Task DeletePOI(POIModel poi)
    {
        if(editPOIs == null || POIs == null)
        {
            throw new Exception("Edit list was empty");
        }
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this POI? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = Dialog.Show<DeleteDialog>("Delete", parameters, options);

        var result = await dialog.Result;

        try
        {
            IsBusy = true;
            if (!result.Canceled)
            {
                editPOIs.Remove(poi);
                POIs.Remove(poi);
                await ClientContext.Admin.DeletePOIAsync(poi.Id);
            }

            IsBusy = false;

        }
        catch (Exception ex)
        {
            ShowError(ex);
        }


    }

    private void NavigateUploadImage(MapModel model)
    {
        Navigation.NavigateTo($"map/{model.Id}");
    }

    private void EditPOI(POIModel model)
    {
        Navigation.NavigateTo($"poi/edit/{model.Id}");
    }

    private void SetEdited(POIModel poi)
    {
        if (!isEdited) 
        {
            isEdited = true;
            StateHasChanged();

        }

        if (editPOIs != null && editPOIs.Contains(poi))
        {
            editPOIs.Add(poi);
        }
    }

    private async Task SaveChangesAsync()
    {
        if (editPOIs != null)
        {
            foreach (var poi in editPOIs)
            {
                await ClientContext.Admin.UpdatePOIAsync(poi.Id, Id, poi.X, poi.Y, poi.ImageURL, poi.Title, poi.Description, poi.PoiType);
            }
        }
    }

    private void NewPOI()
    {
        if (!isEdited)
        {
            isEdited = true;
        }
        var poi = new POIModel();
        poi.Id = Guid.NewGuid();
        poi.MapId = Id;
        if (editPOIs != null && POIs != null)
        {
            POIs.Add(poi);
            editPOIs.Add(poi);
            StateHasChanged();
        }
    }

    private async Task OnZoomInClick(MouseEventArgs args)
    {
        await AdjustScale(true);
    }

    private async Task OnZoomOutClick(MouseEventArgs args)
    {
        await AdjustScale(false);
    }

    private async Task OnResetClick(MouseEventArgs args)
    {
        if (parent == null)
        {
            throw new Exception("panzoom is null");
        }

        await parent.ResetAsync();
    }

    private async Task AdjustScale(bool zoomIn)
    {
        if (parent == null)
        {
            throw new Exception("panzoom is null");
        }
        var oldScale = await parent.GetScaleAsync();

        if (zoomIn)
        {
            await parent.ZoomInAsync();
        }
        else
        {
            await parent.ZoomOutAsync();
        }
        var newScale = await parent.GetScaleAsync();
    }

    private void NavigateUploadImage()
    {
        Navigation.NavigateTo($"map/{Id}");
    }
}
