@page "/"
@inherits BasePage
@attribute [Authorize]

<BusyIndicator Model="@this" />
<PageTitle>@Localizer["AppName"]</PageTitle>

@if (!IsBusy && maps!=null && activeMap!=null)
{<MudStack>
    <MudGrid>
        <MapView Data="activeMap" OnClick="SelectMap" OnDelete="DeleteMap" IsActive=true />

     
        @foreach (var map in maps)
        {
            if (map.Id != activeMap.Id)
            {
                <MapView Data="map" OnClick="SelectMap" OnDelete="DeleteMap" OnActive="SetActiveMap" IsActive=false />
            }
           
        }
       
    </MudGrid>
    
        <MudGrid xs="12" sm="6" md="4" lg="3" xl="2" class="mx-auto" Align="Align.End" Justify="Justify.Center">
            <MudIconButton  Color="Color.Primary" Variant="Variant.Filled" Size="Size.Large" Icon="@Icons.Material.Sharp.Map" />
        </MudGrid>
       </MudStack>
       
}

@code
{
    private List<MapModel>? maps;
    private MapModel? activeMap;


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        IsInitialized = true;

        try
        {
            IsBusy = true;
            await Refresh();

            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }
    private async Task Refresh()
    {   
        maps = await ClientContext.Admin.GetMapsAsync();
        if (maps == null || maps.Count == 0)
        {
            activeMap = await ClientContext.Admin.CreateMapAsync();
            
        }
        else
        {
            activeMap = await ClientContext.Admin.GetActiveMapAuthAsync();
           
        }
        if (activeMap.Image == null)
        {
            NavigateUploadImage(activeMap);
        }
    }

    private async Task DeleteMap(MapModel map)
    {
        try
        {
            IsBusy = true;
            await ClientContext.Admin.DeleteMapAsync(map.Id);
            await Refresh();
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    private async Task SetActiveMap(MapModel map)

    {
        try
        {
            IsBusy = true;
            await ClientContext.Admin.UpdateActiveMapAsync(map.Id);
            await Refresh();
            IsBusy = false;
        }
        catch (Exception ex)
        {
            ShowError(ex);
        }
    }

    private void SelectMap(MapModel model)
    {
        Navigation.NavigateTo($"map/{model.Id}");
    }

    private void NavigateUploadImage(MapModel model)
    {
        Navigation.NavigateTo($"map/{model.Id}");
    }
}