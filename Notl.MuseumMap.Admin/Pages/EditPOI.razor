@page "/poi/{Id:guid}"
@inherits BasePage
@attribute [Authorize]
<BusyIndicator Model="@this" />

@if (!IsBusy && poi != null)
{
	<MudContainer MaxWidth="MaxWidth.Large">
		<EditForm Model="poi" OnValidSubmit="OnSubmit">
			<MudCard>
				<MudCardHeader Class="justify-center">
					<MudText Typo="Typo.h4">
					 @Localizer["Text_NewPOI"]
					</MudText>
				</MudCardHeader>
				<MudCardContent>
					<MudStack Row=true>
						<MudStack Class="justify-center">
							@if (poi.Image != null)
							{
								<MudImage Src="@poi.Image.Url" ObjectFit=ObjectFit.Contain Height="200" Width="400" />
							}
							else
							{
								<MudImage Src="placeholder.png" ObjectFit=ObjectFit.Contain Height="200" Width="400" />
							}
							<MudStack Row=true>
								<MudSpacer/>
								<MudTooltip Text="@Localizer["ToolTip_UploadImagePOI"]">
									<MudButton HtmlTag="label"
										   Variant="Variant.Filled"
										   Color="Color.Primary"
										   StartIcon="@Icons.Material.Filled.CloudUpload"
										   for="upload">
										@Localizer["Button_UploadImage"]
									</MudButton>
								</MudTooltip>
								<MudSpacer />
							</MudStack>
							<InputFile id="upload" accept="image/*" OnChange="UploadPhotoAsync" class="d-none" />
						</MudStack>
						<MudStack>
							<MudTextField @bind-Value=poi.Title Label="@Localizer["Label_POITitle"]" />
							<MudRadioGroup @bind-SelectedOption=poi.PoiType>
								<MudRadio Option="POIType.Exhibit">@Localizer["Option_Exhibit"]</MudRadio>
								<MudRadio Option="POIType.Item">@Localizer["Option_Item"]</MudRadio>
								<MudRadio Option="POIType.Bathroom">@Localizer["Option_Bathroom"]</MudRadio>
								<MudRadio Option="POIType.Accessability">@Localizer["Option_Accessability"]</MudRadio>
							</MudRadioGroup>
							<MarkdownEditor @bind-Value="poi.Description" />
						</MudStack>
					</MudStack>
				</MudCardContent>
				<MudCardActions>
					<MudButton Color="Color.Warning" Class="ml-auto mr-6 mb-3" OnClick="OnCancel">@Localizer["Button_Cancel"]</MudButton>
					<MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Class="mr-auto ml-6 mb-3">
						@Localizer["Button_Save"]
					</MudButton>
				</MudCardActions>
			</MudCard>
		</EditForm>
	</MudContainer>
}

@code {
	private POIModel? poi;

	[Parameter]
	public Guid Id { get; set; }

	protected async override Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		IsInitialized = true;

		try
		{
			IsBusy = true;
			poi = await ClientContext.Admin.GetPOIAuthAsync(Id);
			IsBusy = false;
		}
		catch (Exception ex)
		{
			ShowError(ex);
		}
	}

	Task OnMarkdownValueChanged(string value)
	{
		return Task.CompletedTask;
	}

	public async Task UploadPhotoAsync(InputFileChangeEventArgs e)
	{
		try
		{
			if (poi == null)
			{
				throw new Exception();
			}

			var file = e.File;

			var stream = file.OpenReadStream();

			IsBusy = true;
			var image = await ClientContext.Admin.UpdatePOIImageAsync(poi.Id, new FileParameter(stream));
			poi.Image = image;
			IsBusy = false;
		}
		catch (Exception ex)
		{
			ShowError(ex);
		}
	}

	private void OnCancel()
	{
		if (poi != null)
		{
			Navigation.NavigateTo($"map/{poi.MapId}");
		}
	}

	private async Task OnSubmit()
	{
		if (poi == null)
		{
			throw new Exception("poi not initialized");
		}

		try
		{
			IsBusy = true;
			poi = await ClientContext.Admin.UpdatePOIContentAsync(poi);
			Navigation.NavigateTo($"map/{poi.MapId}");
			IsBusy = false;
		}
		catch (Exception ex)
		{
			ShowError(ex);
		}
	}
}

